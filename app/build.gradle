import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.tinker.patch'
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "nick.xxx.com.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 2
        versionName "1.0.0.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all{ variant ->
                variant.outputs.each { output ->
                    //setting apk name to what you want
                    output.outputFile = new File(output.outputFile.parent, "appname" + "_v" + defaultConfig.versionCode +
                             "_" +defaultConfig.versionName +"_"+ releaseTime() +".apk");
                }
            }
        }
    }

    signingConfigs{
        release{
            storeFile file("nick.jks")
            storePassword "123456"
            keyAlias "nick"
            keyPassword "123456"
        }
    }
}
def releaseTime() {    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute().text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

task('increaseVersionCode') << {
    def manifestFile = file("build.gradle")
    def pattern = Pattern.compile("versionCode (\\d+)")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode " + ++versionCode)
    manifestFile.write(manifestContent)
}

task('incrementVersionName') << {
    def manifestFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("versionName \"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
    def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + (buildVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName \"" + mNextVersionName + "\"")
    manifestFile.write(manifestContent)
}
tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //AndFix
    compile 'com.alipay.euler:andfix:0.4.0@aar'
    //下拉刷新上拉加载
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    compile 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.3'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:cardview-v7:26.0.0-alpha1'
    //Tinker
    provided('com.tencent.tinker:tinker-android-anno:1.8.1')
    compile('com.tencent.tinker:tinker-android-lib:1.8.1')
    compile "com.android.support:multidex:1.0.1"
}
